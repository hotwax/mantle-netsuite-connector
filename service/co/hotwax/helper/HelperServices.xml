<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="get" noun="FileContentFromGitLab">
        <in-parameters>
            <parameter name="branch" default-value="main"/>
            <parameter name="systemMessageRemoteId"/>
            <parameter name="projectName"/>
            <parameter name="filePath"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean" default-value="false"/>
            <parameter name="fileContent"/>
            <parameter name="errorText"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote"/>
            <script><![CDATA[
                import java.util.Base64
                import java.net.URLEncoder
                import org.moqui.util.RestClient
                import org.moqui.util.RestClient.RestResponse
                import com.fasterxml.jackson.databind.ObjectMapper
                success = false
                fileContent = null
                errorText = null
                try {
                    urlEncodedProjectName = URLEncoder.encode(projectName, "UTF-8")
                    urlEncodedFilePath = URLEncoder.encode(filePath, "UTF-8")
                    def parameters = ["ref": branch]
                    String urlExpand = ec.resource.expand(systemMessageRemote.receiveUrl, "systemMessage",
                        [projectName: urlEncodedProjectName, fileName: urlEncodedFilePath], false)
                    RestClient restClient = ec.service.rest()
                        .method(RestClient.GET)
                        .uri(urlExpand)
                        .addHeader("Content-Type", "application/json")
                        .addHeader("PRIVATE-TOKEN", systemMessageRemote.privateKey)
                    restClient.addBodyParameters(parameters)
                    responseText = null
                    try {
                        restResponse = restClient.call()
                        if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                            logger.error("API error response : " + restResponse.text())
                            errorText = restResponse.text()
                            return
                        }
                        ObjectMapper objectMapper = new ObjectMapper()
                        responseText = objectMapper.readValue(restResponse.text(), Map.class)
                        if (responseText?.content) {
                            byte[] decodedFileContent = Base64.decoder.decode(responseText.content)
                            fileContent = new String(decodedFileContent, "UTF-8")
                            success = true
                        } else {
                            errorText = "GitLab API response does not contain file content."
                            logger.error(errorText)
                        }
                    } catch (Exception e) {
                        logger.error("Error processing API response: " + e.getMessage(), e)
                    }
                }  catch (Exception e) {
                    logger.error("Error calling the gitlab api:  ${e.getMessage()} ")
                }
            ]]></script>
        </actions>
    </service>

    <!--
    Purpose:
        This service updates (or adds) a file in the local Moqui runtime file system,
        typically from a remote repository (e.g., GitLab) based on the given parameters.
    Parameters:
        - Overwrite: true
            →  true means you are 100% sure you want to replace the existing file.
        - Branch: main
            → Specifies the Git branch from which to fetch the file.
        - System Message Remote ID: GITLAB_PROJECT_CONFIG
            → Identifier for the remote repository configuration.
        - Project Name: commerce/deliveries/krewe
            → GitLab project path containing the desired file.
        - File Path: Schema/PosOrderSchema.json
            → Path of the file inside the Git project to fetch.
        - Target File Path: runtime://datamanager/netsuite/schema
            → Local destination path in Moqui runtime where the file will be stored.
    -->
    <service verb="update" noun="FileInFileSystem">
        <description>Fetches a file from GitLab and stores it in the file system.</description>
        <in-parameters>
            <parameter name="overwrite" type="Boolean" default="false">
                <description>true means you are 100% sure you want to replace the existing file</description>
            </parameter>
            <parameter name="branch" default-value="main"/>
            <parameter name="systemMessageRemoteId" default-value="GITLAB_PROJECT_CONFIG"/>
            <parameter name="projectName"/>
            <parameter name="filePath"/>
            <parameter name="targetFilePath"/>
        </in-parameters>
        <out-parameters>
            <parameter name="success" type="Boolean" default-value="false"/>
            <parameter name="errorText"/>
            <parameter name="savedFilePath"/>
        </out-parameters>
        <actions>
            <script>import java.nio.charset.StandardCharsets</script>
            <if condition="overwrite">
                <!-- Step 1: Fetch file content from GitLab -->
                <service-call name="co.hotwax.helper.HelperServices.get#FileContentFromGitLab" in-map="context" out-map="apiResponse"/>
                <set field="success" value="false" type="Boolean"/>
                <set field="errorText"/>

                <if condition="!apiResponse.success">
                    <set field="errorText" value="Failed to fetch file from GitLab: ${apiResponse.errorText}"/>
                    <return/>
                </if>
                <set field="fileName" from="filePath.substring(filePath.lastIndexOf('/') + 1)"/>
                <set field="targetFilePath" from="targetFilePath + (targetFilePath.endsWith('/') ? '' : '/') + fileName"/>
                <service-call name="org.moqui.impl.SystemMessageServices.receive#IncomingSystemMessage" in-map="[systemMessageTypeId:'GITLAB_FILE_SYNC',
                    messageText:apiResponse.fileContent, remoteMessageId:targetFilePath]"/>

                <set field="success" value="true" type="Boolean"/>
            </if>
        </actions>
    </service>
    <service verb="save" noun="FileInFileSystem">
        <description>service to consume the system messaga and save the file content in file system.</description>
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <script><![CDATA[
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets

                // Expand the file path dynamically
                def expandedFilePathRef = ec.resource.expand(systemMessage.remoteMessageId, null, [:], false)
                def expandedFilePath = ec.resource.getLocationReference(expandedFilePathRef).getUri().getPath()

                // Create directories if they do not exist
                def file = new File(expandedFilePath)
                if (!file.parentFile.exists()) file.parentFile.mkdirs()

                // Write content to file
                Files.write(file.toPath(), systemMessage.messageText.getBytes(StandardCharsets.UTF_8))

                logger.info("File successfully written to: ${expandedFilePath}")
                ]]></script>
        </actions>
    </service>

    <service verb="put" noun="FileOnSftp">
        <in-parameters>
            <parameter name="systemMessageRemoteId"/>
            <parameter name="receivePath"/>
            <parameter name="sendPath"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote"/>
            <if condition="!systemMessageRemote"><return error="true" message="System message ${systemMessageId} has no SystemMessageRemote, not sending."/></if>
            <if condition="!systemMessageRemote.sendUrl"><return error="true" message="No sendUrl on SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending."/></if>
            <if condition="!systemMessageRemote.username"><return error="true" message="No username on SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending."/></if>
            <set field="sendPath" from="ec.resource.expand(sendPath, null, [sftpUsername:systemMessageRemote.username], false)"/>
            <set field="filename" from="receivePath.substring(receivePath.lastIndexOf('/') + 1)"/>
            <set field="fileRef" from="ec.resource.getLocationReference(receivePath)"/>
            <if condition="!fileRef"><return error="true" message="File not found at path: ${receivePath}"/></if>

            <script>
                import org.moqui.sftp.SftpClient
                try ( InputStream inputStream = fileRef.openStream();
                SftpClient sftpClient = new SftpClient((String) systemMessageRemote.sendUrl, (String) systemMessageRemote.username)) {

                if (systemMessageRemote.privateKey) sftpClient.publicKeyPkcs8((String) systemMessageRemote.privateKey, (String) systemMessageRemote.publicKey)
                else sftpClient.password((String) systemMessageRemote.password)

                if (systemMessageRemote.remoteAttributes == 'N') sftpClient.preserveAttributes(false)

                sftpClient.connect()
                sftpClient.put(sendPath, filename, (InputStream) inputStream)
                }
            </script>
        </actions>
    </service>
</services>