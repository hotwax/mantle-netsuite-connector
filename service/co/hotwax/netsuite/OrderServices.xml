<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="generate" noun="CreateOrderFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="thruOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="includeSalesChannel" type="List">
                <description>Parameter to fetch Order details for specific sales channel or a list of sales channel.</description>
            </parameter>
            <parameter name="excludeSalesChannel" type="List">
                <description>Parameter to exclude the Orders from the specific sales channel or a list of sales channel.</description>
            </parameter>
            <parameter name="isCashOrderFeed">
                <description>
                    Parameter to determine if the feed is for cash orders or not.
                    Need to configure this as the same service is used for both sales orders and cash sales orders.
                    if set to 'Y' then the feed is for cash orders and if set to 'N' then the feed is for sales orders.
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowTimestamp" from="ec.user.nowTimestamp"/>
            <log message="Generating Order Feed file for Order ${orderId} at time ${nowTimestamp}"/>

            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null">
                <return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/>
            </if>

            <script>
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                netsuiteOrders_find = ec.entity.find("co.hotwax.order.EligibleOrdersForNetSuiteView")
                if(orderId) netsuiteOrders_find.condition("orderId", orderId)
                if(fromOrderDate) netsuiteOrders_find.condition("orderDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromOrderDate)
                if(thruOrderDate) netsuiteOrders_find.condition("orderDate", EntityCondition.ComparisonOperator.LESS_THAN, fromOrderDate)
                if(includeSalesChannel) netsuiteOrders_find.condition("salesChannelEnumId",EntityCondition.ComparisonOperator.IN, includeSalesChannel)
                if(excludeSalesChannel) netsuiteOrders_find.condition("salesChannelEnumId",EntityCondition.ComparisonOperator.NOT_IN, excludeSalesChannel)

                // Add conditions based on isCashOrderFeed parameter
                if (isCashOrderFeed == "Y") {
                    netsuiteOrders_find.condition("nonPosCompletedItemsCount", EntityCondition.ComparisonOperator.EQUALS, 0)
                } else if (isCashOrderFeed == "N") {
                    netsuiteOrders_find.condition("nonPosCompletedItemsCount", EntityCondition.ComparisonOperator.GREATER_THAN, 0)
                }

                netsuiteOrders_find.selectField("orderId,netsuiteCustomerId,salesChannelEnumId,orderDate")
                netsuiteOrders_find.distinct(true)

                //If no eligible orders, then don't generate the file
                long netsuiteOrdersCount = netsuiteOrders_find.count()
                if (netsuiteOrdersCount == 0) {
                    ec.message.addMessage("No eligible orders at ${nowTimestamp}, not generating the HotWax Feed file for Netsuite.")
                    return
                }
                try(ordersItr = netsuiteOrders_find.iterator()){
                    context.ordersItr = ordersItr
            </script>

            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue">
                <field-map field-name="enumId" from="systemMessageTypeId"/>
            </entity-find-one>

            <if condition="enumValue &amp;&amp; enumValue.relatedEnumId">
                <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="relatedSystemMessageType">
                    <field-map field-name="systemMessageTypeId" from="enumValue.relatedEnumId"/>
                </entity-find-one>
                <if condition="!relatedSystemMessageType"><log level="warn" message="Could not find SystemMessageType with ID ${enumValue.relatedEnumId}, not producing requiredFieldsMissing system message."/></if>
                <else><log level="warn" message="Related SystemMessageType to produce for ${systemMessage.systemMessageTypeId} not defined, not producing requiredFieldsMissing system message."/></else>
            </if>

            <!-- Prepare csv File Path -->
            <set field="csvFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowTimestamp, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowTimestamp, 'yyyy-MM-dd-HH-mm-ss-SSS'),
                 productStoreId:productStoreId], false)"/>
            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>

            <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="groovyFileResource">
                <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>
                <field-map field-name="parameterName" value="resourcePath"/>
            </entity-find-one>

            <if condition="groovyFileResource &amp;&amp; groovyFileResource.parameterValue">
                <set field="templateLocation" from="groovyFileResource.parameterValue"/>
                <else><set field="templateLocation" value="component://mantle-netsuite-connector/template/GenerateCreateOrderCsv.ftl"/></else>
            </if>

            <set field="csvFile" from="new File(csvFilePath)"/>
            <set field="isFileEmpty" value="true" type="Boolean"/>
            <set field="csvHeaders" from="null" type="String"/>
            <script>
                    if (!csvFile.parentFile.exists()) csvFile.parentFile.mkdirs()
                    try (def writer = Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8)){
                        ec.resourceFacade.template(templateLocation, writer)
                        context.ordersItr = null
                    }
                }
                    catch (Exception e) {
                        ec.message.addMessage("Error generating Order Items Feed file with type ${systemMessageTypeId} and remote ${systemMessageRemoteId}: ${e.getMessage()}")
                    }
            </script>
            <if condition="!isFileEmpty">
                <!-- Save the Json Feed File path in System Message messageText -->
                <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                    messageText:csvFilePath]" out-map="FeedSysMsgOut"/>
            </if>
            <return message="Generating Order Items Feed file with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${FeedSysMsgOut?.systemMessageId}"/>
        </actions>
    </service>
    <service verb="consume" noun="FulfilledOrderItemFeed" authenticate="anonymous-all">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <!-- Fetch System Message -->
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>

            <if condition="!systemMessage.messageText">
                <return type="warning" message="System message [${systemMessageId}] for Type ${systemMessage?.systemMessageTypeId} has no message text, not consuming."/>
            </if>

            <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="sendSmrParam">
                <field-map field-name="systemMessageTypeId" from="systemMessage.systemMessageTypeId"/>
                <field-map field-name="parameterName" value="sendSmrId"/>
            </entity-find-one>
            <if condition="sendSmrParam">
                <set field="sendSmrId" from="sendSmrParam.parameterValue"/>
            </if>

            <if condition="sendSmrId">
                <!-- Find SystemMessageType related to systemMessage.systemMessageType to produce corresponding system message -->
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue">
                    <field-map field-name="enumId" from="systemMessage.systemMessageTypeId"/>
                </entity-find-one>

                <if condition="enumValue &amp;&amp; enumValue.relatedEnumId">
                    <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="relatedSystemMessageType">
                        <field-map field-name="systemMessageTypeId" from="enumValue.relatedEnumId"/>
                    </entity-find-one>
                    <if condition="!relatedSystemMessageType"><log level="warn" message="Could not find SystemMessageType with ID ${enumValue.relatedEnumId}, not producing related system message."/></if>
                    <else>
                        <log level="warn" message="Related SystemMessageType to produce for ${systemMessage.systemMessageTypeId} not defined, not producing related system message."/>
                    </else>
                </if>
                <else>
                    <log level="warn" message="sendSmrId not defined for ${systemMessage.systemMessageTypeId} not defined, not producing related system message."/>
                </else>
            </if>

            <!-- Prepare JSON File Path -->
            <set field="jsonFilePathRef" from="ec.resource.expand(relatedSystemMessageType.receivePath, null,
            [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
             productStoreId:productStoreId], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <script><![CDATA[
            import org.apache.commons.csv.*
            import com.fasterxml.jackson.core.JsonFactory
            import com.fasterxml.jackson.core.JsonGenerator
            import com.fasterxml.jackson.databind.ObjectMapper
            import java.nio.charset.StandardCharsets

            try {
                // Prepare JSON file
                File fulfilledOrderItemJsonFile = new File(jsonFilePath)
                if (!fulfilledOrderItemJsonFile.parentFile.exists()) fulfilledOrderItemJsonFile.parentFile.mkdirs()

                JsonFactory jsonFactory = new JsonFactory()

                /* Use try-with-resources to automatically close PrintWriter & JsonGenerator */
                try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, fulfilledOrderItemJsonFile);
                     JsonGenerator generator = jsonFactory.createGenerator(pw)) {

                    generator.writeStartArray()
                    /* Use try-with-resources to automatically close BufferedReader & CSVParser */
                    try (BufferedReader reader = new BufferedReader(new StringReader(ec.resource.getLocationReference(systemMessage.messageText).getText()));
                         CSVParser parser = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(reader)) {

                    def orderMap = [:]

                    for (CSVRecord record : parser) {
                        def orderId = record.get("orderId")

                        shippedDate = ec.l10n.format(ec.l10n.parseDateTime(record.get("shippedDate"), "M/d/yyyy h:mm a"), "yyyy-MM-dd HH:mm:ss")

                        def orderItem = [
                            orderItemSeqId    : record.get("orderItemSeqId"),
                            externalFacilityId: record.get("externalFacilityId"),
                            shippedDate       : shippedDate ,
                            quantity          : record.get("quantity"),
                            trackingNumber    : record.get("trackingNumber") ?: "",
                            "validation-result": "success"
                        ]

                        def carrierName = record.get("shiphawkCarrierName")?.trim()?.toLowerCase()?.replaceAll("\\s+", "_") ?: ""

                        if (!orderMap.containsKey(orderId)) {
                            orderMap[orderId] = [
                                orderId           : orderId,
                                shipHawkShipmentId: record.get("shipHawkShipmentId") ?: "",
                                shiphawkCarrierName: carrierName,
                                items             : []
                            ]
                        }
                        orderMap[orderId].items << orderItem
                    }

                    // Write each order as a separate object in the JSON array
                    ObjectMapper mapper = new ObjectMapper()
                    for (orderEntry in orderMap) {
                        def orderJson = [orderMap: orderEntry.value]
                        mapper.writerWithDefaultPrettyPrinter().writeValue(generator, orderJson)
                    }
                }
                generator.writeEndArray()
                }

            } catch (IOException e) {
                logger.error("Error preparing Fulfilled Order Item Feed JSON file", e)
                ec.message.addError("Error preparing order feed file ${e}")
            }
        ]]></script>

            <if condition="relatedSystemMessageType">
                <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[systemMessageTypeId:relatedSystemMessageType.systemMessageTypeId, systemMessageRemoteId:sendSmrId,
                        messageText:jsonFilePathRef, remoteMessageId: jsonFilePathRef.substring(jsonFilePathRef.lastIndexOf('/')+1), sendNow:true]"
                    out-map="queueSystemMessageOut" ignore-error="true" transaction="force-new"/>
            </if>

            <return message="Created the fulfilledOrderItems Feed file at time ${ec.user.nowTimestamp} with type ${relatedSystemMessageType.systemMessageTypeId}
                and remote ${sendSmrId} saved response in messages ${queueSystemMessageOut?.systemMessageId}"/>
        </actions>
    </service>
</services>
