<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">
    <service verb="generate" noun="CreateOrderFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="thruOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="includeShipmentMethod" type="List">
                <description>
                    Parameter to fetch Order details for specific shipment method or a list of shipping method
                    like: POS_COMPLETED,STORE_PICKUP
                </description>
            </parameter>
            <parameter name="excludeShipmentMethod" type="List">
                <description>Parameter to exclude the Orders from the specific shipment method or a list of shipping method
                    like: POS_COMPLETED,STORE_PICKUP
                </description>
            </parameter>
            <parameter name="isMixCartOrder">
                <description>
                    Parameter to include or exclude the orders which have multiple shipping methods.
                    Example: Y to include the order with multiple shipping methods.
                    N to not include the order with multiple shipping methods.
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Order Feed file for Order ${orderId} at time ${nowDate}"/>

            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null">
                <return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/>
            </if>


            <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="sendSmrParam">
                <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>
                <field-map field-name="parameterName" value="sendSmrId"/>
            </entity-find-one>
            <if condition="sendSmrParam">
                <set field="sendSmrId" from="sendSmrParam.parameterValue"/>
            </if>

            <if condition="sendSmrId">
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="enumValue">
                    <field-map field-name="enumId" from="systemMessageTypeId"/>
                </entity-find-one>

                <if condition="enumValue &amp;&amp; enumValue.relatedEnumId">
                    <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="relatedSystemMessageType">
                        <field-map field-name="systemMessageTypeId" from="enumValue.relatedEnumId"/>
                    </entity-find-one>
                    <if condition="!relatedSystemMessageType"><log level="warn" message="Could not find SystemMessageType with ID ${enumValue.relatedEnumId}, not producing related system message."/></if>
                    <else>
                        <log level="warn" message="Related SystemMessageType to produce for ${systemMessage.systemMessageTypeId} not defined, not producing related system message."/>
                    </else>
                </if>
                <else>
                    <log level="warn" message="sendSmrId not defined for ${systemMessage.systemMessageTypeId} not defined, not producing related system message."/>
                </else>
            </if>

            <!-- Prepare csv File Path -->
            <set field="csvFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
                 productStoreId:productStoreId], false)"/>
            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>

            <!-- Prepare csv File Path -->
            <set field="invalidFilePathRef" from="ec.resource.expand(relatedSystemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
                 productStoreId:productStoreId], false)"/>
            <set field="invalidFilePath" from="ec.resource.getLocationReference(invalidFilePathRef).getUri().getPath()"/>

            <script>
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVPrinter
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                File csvFile = new File(csvFilePath)
                File invalidFile = new File(invalidFilePath)
                if (!csvFile.parentFile.exists()) csvFile.parentFile.mkdirs()
                if (!invalidFile.parentFile.exists()) invalidFile.parentFile.mkdirs()
                def isFileEmpty = true
                def csvHeaders = null

                netsuiteOrders_find = ec.entity.find("co.hotwax.order.EligibleOrdersForNetSuiteView")
                if(orderId) netsuiteOrders_find.condition("orderId", orderId)
                if(fromOrderDate) netsuiteOrders_find.condition("orderDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromOrderDate)
                if(thruOrderDate) netsuiteOrders_find.condition("orderDate", EntityCondition.ComparisonOperator.LESS_THAN, fromOrderDate)
                if(includeShipmentMethod) netsuiteOrders_find.condition("shipmentMethodTypeId",EntityCondition.ComparisonOperator.IN, includeShipmentMethod)
                if(excludeShipmentMethod) netsuiteOrders_find.condition("shipmentMethodTypeId",EntityCondition.ComparisonOperator.NOT_IN, excludeShipmentMethod)
                if(isMixCartOrder) netsuiteOrders_find.condition("isMixCartOrder", EntityCondition.ComparisonOperator.EQUALS, isMixCartOrder)

                netsuiteOrders_find.selectField("orderId,partyId,isMixCartOrder")
                netsuiteOrders_find.distinct(true)

                // Using try-with-resources to automatically close the EntityListIterator 'ordersItr'
                try (ordersItr = netsuiteOrders_find.iterator()) {
            </script>
            <if condition="!ordersItr.hasNext()">
                <return message="No eligible orders at ${nowDate}, not generating the HotWax Feed file."/>
            </if>
            <script>
                try (def writer = Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8);
                def invalidWriter = Files.newBufferedWriter(Paths.get(invalidFilePath), StandardCharsets.UTF_8);
                def csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT);
                def invalidCsvPrinter = new CSVPrinter(invalidWriter, CSVFormat.DEFAULT)) {
            </script>

            <iterate list="ordersItr" entry="order">
                <service-call name="co.hotwax.netsuite.OrderServices.prepare#OrdersFeedDataForNetSuite" in-map="[orderId:order.orderId]"
                              out-map="context"/>
                <set field="orderMap" from="context?.orderMap"/>
                <if condition="orderMap">
                    <service-call name="co.hotwax.netsuite.OrderServices.add#BusinessLogicInFeedData" in-map="[orderMap:orderMap,isMixCartOrder:order.isMixCartOrder]"
                                  out-map="orderMapOut"/>
                    <!-- Find the System Message Type Parameter based on the systemMessageTypeId and parameterName.
                    This will retrieve the Groovy script resource path if configured.
                    -->
                    <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="groovyFileResource">
                        <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>
                        <field-map field-name="parameterName" value="resourcePath"/>
                    </entity-find-one>
                    <!-- Check if the Groovy file resource is available. -->
                    <if condition="groovyFileResource">
                        <!-- Set the scriptPath using the retrieved parameterValue from the entity find operation. -->
                        <set field="scriptPath" from="groovyFileResource.parameterValue"/>
                        <!-- Execute the Groovy script located at the scriptPath and store the result in the context. -->
                        <script>
                            Object result = ec.resource.script(scriptPath, null)
                            context.result = result
                        </script>
                        <else>
                            <!-- If no Groovy file resource is found, fallback to using the default orderMapDetail. -->
                            <set field="result" from="orderMapOut.orderMapDetail"/>
                        </else>
                    </if>
                    <script>
                        def order = context.get("result")
                        def orderItems = order.remove("orderItems")
                        def orderId = order.remove("orderName")
                        order.remove("salesChannelEnumCode")
                        def flattenedOrders = []
                        orderItems.each { item ->
                            item.put("orderId", orderId)
                            item.remove("orderItemSeqId")
                            item.remove("isDiscountRow")
                            item.remove("productId")
                            item.remove("productTypeId")
                            item.put("item", item.remove("netSuiteProductId"))
                            def flattenedOrder = [:]
                            flattenedOrder.putAll(order)
                            item.each { key, value -> flattenedOrder["$key"] = value }
                            flattenedOrders.add(flattenedOrder)
                        }
                        context.flattenedOrders = flattenedOrders

                        // Dynamically determine headers in the first iteration
                        if (!csvHeaders) {
                            csvHeaders = flattenedOrders[0].keySet().collect { it as String }
                            csvPrinter.printRecord(csvHeaders)
                            invalidCsvPrinter.printRecord(csvHeaders)
                        }

                        // Check for required fields and separate valid/invalid orders
                        flattenedOrders.each { record ->
                            def missingFields = []
                            def requiredFields = ["customer", "date", "country"]

                            requiredFields.each { field -> if (!record[field]) { missingFields.add(field) } }

                            if (missingFields.isEmpty()) {
                                // Write valid record to the main CSV
                                def orderedRecord = csvHeaders.collect { key -> record[key] ?: "" }
                                csvPrinter.printRecord(orderedRecord)
                            } else {
                                // Write invalid record to the invalid CSV
                                def orderedRecord = csvHeaders.collect { key -> record[key] ?: "" }
                                invalidCsvPrinter.printRecord(orderedRecord)
                                isFileEmpty = false

                            }
                        }
                    </script>
                </if>
            </iterate>
            <script>
                    } catch (Exception e) {
                        ec.message.addError("Error preparing order feed file ${e}")
                    }
                }
                // Delete invalid file if empty
                if (isFileEmpty) {
                    invalidFile.delete()
                }
            </script>
            <!-- Save the Json Feed File path in System Message messageText -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                messageText:csvFilePath]" out-map="FeedSysMsgOut"/>

            <if condition="!isFileEmpty">
                <!-- Save the Json Feed File path in System Message messageText -->
                <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[systemMessageTypeId:relatedSystemMessageType.systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                    messageText:invalidFilePath]" out-map="MissingFieldSysMsgOut"/>
            </if>

            <return message="Generating Order Items Feed file with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${FeedSysMsgOut.systemMessageId}"/>
        </actions>
    </service>
    <service verb="prepare" noun="OrdersFeedDataForNetSuite">
        <!--
        This service prepares the order and order item details for eligible orders that need to be
        exported to NetSuite. The service fetches order data from the `OrderDetailsForNetSuiteView`
        and order item data from the `OrderItemsForNetSuiteView`. It then prepares a consolidated
        map containing both the order-level details and the associated order items. This map is
        returned as `orderMap` which will be used in further processing.

        - To retrieve and compile order details and corresponding order item details for NetSuite integration.
        - If no eligible order items are found, the service terminates early, returning an empty order map and logging a message.
        - If order items exist, they are added to a list and merged with the order details to create a final map (`orderMap`) which contains
         both the order-level information and associated items.
        - The service is executed for each order individually.

        -->
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="orderMap"/>
        </out-parameters>
        <actions>
            <log message="order: ${orderId}"/>
            <entity-find entity-name="co.hotwax.order.OrderDetailsForNetSuiteView" list="orderLevelDetailList">
                <econdition field-name="orderId" from="orderId"/>
            </entity-find>
            <set field="orderDetails" from="orderLevelDetailList[0]"/>
            <script>
                orderDetails.date = new java.text.SimpleDateFormat("MM/dd/yyyy").format(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").parse(orderDetails.date.toString()))
                orderDetails.shippingCost = orderDetails.shippingCost ?: "0"
            </script>
            <!-- Set orderItemList List to add the order Item Detail map -->
            <set field="orderItemList" from="[]"/>
            <entity-find entity-name="co.hotwax.order.OrderItemsForNetSuiteView" list="orderItemsList">
                <econdition field-name="orderId" operator="equals" from="orderDetails.orderId"/>
            </entity-find>

            <if condition="!orderItemsList">
                <set field="orderMap" from="[]"/>
                <return message="There is no eligible order items for this order" />
            </if>

            <iterate list="orderItemsList" entry="orderItem">
                <log message="orderItemSeqId: ${orderItem.orderItemSeqId}"/>
                <script>
                    orderItemList.add(orderItem.getMap())
                </script>
            </iterate>
            <!-- Prepare the Order Detail map -->
            <set field="orderMap" from="orderDetails.getMap() + [orderItems:orderItemList]"/>
        </actions>
    </service>
    <service verb="add" noun="BusinessLogicInFeedData">
        <in-parameters>
            <parameter name="orderMap" type="Map"/>
            <parameter name="isMixCartOrder"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderMapDetail" type="Map"/>
        </out-parameters>
        <actions>

            <!-- Create a New Map for Processed Data -->
            <script><![CDATA[
                Map<String, Object> processedOrderMap = new HashMap<>(orderMap);

                 String preparePhoneNumber(String... parts) {
                    return parts.findAll { it }?.join(' ') ?: null // Filter non-null and non-empty parts, join with space
                }

                // Prepare billing and shipping phone numbers
                String billingPhone = preparePhoneNumber(orderMap.billingCountryCode, orderMap.billingAreaCode, orderMap.billingContactNumber)
                String shippingPhone = preparePhoneNumber(orderMap.shippingCountryCode, orderMap.shippingAreaCode, orderMap.shippingContactNumber)

                // Add results to the processed map, defaulting to empty string if null
                processedOrderMap.billingPhone = billingPhone ?: " "
                processedOrderMap.phone = shippingPhone ?: " "

                // Remove the original phone-related fields from orderMap
                processedOrderMap.remove("billingCountryCode")
                processedOrderMap.remove("billingAreaCode")
                processedOrderMap.remove("billingContactNumber")
                processedOrderMap.remove("shippingCountryCode")
                processedOrderMap.remove("shippingAreaCode")
                processedOrderMap.remove("shippingContactNumber")

                /*
                Logic to use shipping address as billing address if billing details are missing
                The purpose of this logic is to handle scenarios where the billing address is missing from the order data.
                In such cases, we use the shipping address as a fallback to ensure that we still have a valid billing address
                available to create the order in NetSuite. A country is a required field for NetSuite order creation,
                */

                if (!orderMap.billingContactMechId && orderMap.shippingContactMachId) {
                    log.info("Billing address is missing. Using shipping address as billing address.");
                    processedOrderMap.put("billingAddress1", orderMap.shippingAddress1);
                    processedOrderMap.put("billingAddress2", orderMap.shippingAddress2);
                    processedOrderMap.put("billingCity", orderMap.shippingCity);
                    processedOrderMap.put("billingState", orderMap.shippingState);
                    processedOrderMap.put("billingCountry", orderMap.shippingCountry);
                    processedOrderMap.put("billingPostalCode", orderMap.shippingPostalCode);
                }
                processedOrderMap.remove("shippingContactMechId")
                processedOrderMap.remove("billingContactMechId")
            ]]></script>

            <!--
            we need to ensure that **only non-refunded gift card payments** are included
            in the total gift card payment amount for an order. This is critical to maintain the accuracy of payment
            tracking and avoid over-reporting the payment total when a gift card transaction has been refunded.

            **Problem When Refunded Gift Card Payments are Not Excluded**:
            Without filtering out refunded gift card payments, we risk including **invalid or duplicate payment records**
            in the order’s total gift card payment. For example, a gift card transaction might fail, causing a refund record
            to be created, but due to multiple records being generated for the same failed transaction, the order’s total
            could incorrectly reflect the refunded amount. This could lead to discrepancies in payment reporting, affecting
            both financial reconciliation and downstream systems like NetSuite.

            - **Gift Card Payments**: We identify gift card payments by checking for transactions where the `paymentMethodTypeId` is `EXT_GIFT_CARD`. This ensures we are processing only gift card payments.
            - **Refunded Gift Cards**: Refunds are identified by the presence of a `parentRefNumber` field on a gift card payment. The `parentRefNumber` links the payment to a previous transaction, indicating that this is a refund of a previously processed gift card payment.
            - **Non-Refunded Payments**: After identifying refunded payments, we sum up the gift card payments that **do not have a corresponding refund**. This is done by comparing the `manualRefNumber` of each gift card payment against a list of refunded transactions.
            -->

            <!-- Process Gift Card Payments -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderPaymentPreference" list="GiftCardPaymentList">
                <econdition field-name="paymentMethodTypeId" value="EXT_GIFT_CARD"/>
                <econdition field-name="orderId" from="orderMap.orderId"/>
            </entity-find>

            <!-- Initialize total amount for non-refunded gift cards -->
            <set field="totalNonRefundedGiftCardAmount" type="Integer"/>

            <!-- Logic to sum non-refunded gift card payments -->
            <script><![CDATA[
                def manualRefSet = new HashSet()
                def refundedSet = new HashSet()

                // Identify refunded gift card payments by checking the parent reference number
                for (giftCardPayment in GiftCardPaymentList) {
                    if (giftCardPayment.parentRefNumber) {
                        refundedSet.add(giftCardPayment.parentRefNumber) // Mark as refunded if a parentRefNumber exists
                    }
                }

                // Sum amounts of non-refunded gift cards, ensuring we don't double-count gift cards
                for (giftCardPayment in GiftCardPaymentList) {
                    if (!refundedSet.contains(giftCardPayment.manualRefNumber) && !manualRefSet.contains(giftCardPayment.manualRefNumber)) {
                        totalNonRefundedGiftCardAmount += giftCardPayment.amount
                        manualRefSet.add(giftCardPayment.manualRefNumber) // Avoid double-counting gift cards
                    }
                }
                processedOrderMap.put("HCGiftCardPayment", totalNonRefundedGiftCardAmount)
            ]]></script>

            <entity-find entity-name="co.hotwax.integration.IntegrationTypeMappingAndEnum" list="taxMappingList">
                <econdition field-name="integrationTypeId" value="NETSUITE_TAX_CODE"/>
            </entity-find>

            <set field="shippingTaxCode" value="${taxMappingList?.find { it.mappingKey == 'DEFAULT' }?.mappingValue}"/>

            <script>
                // Set the shipping tax code based on sales channel
                if ("POS Channel" != orderMap.salesChannel) {
                    processedOrderMap.put("shippingTaxCode", shippingTaxCode)
                } else {
                    processedOrderMap.put("shippingTaxCode", "")
                }
            </script>

            <!-- Process Order Items -->
            <set field="orderItemList" from="orderMap.orderItems"/>
            <script><![CDATA[ List<Map<String, Object>> processedOrderItemList = new ArrayList<>();
            String selectedShippingMethod = null;
            if (isMixCartOrder) {
                Set<String> shippingMethods = orderItemList*.shipmentMethodTypeId
                    .findAll { it && it != 'POS_COMPLETED' && it != 'STOREPICKUP' }.toSet();
                selectedShippingMethod = shippingMethods ? shippingMethods.first() : null;
            }
            ]]></script>
            <iterate list="orderItemList" entry="orderItem">
                <!-- Determine if the item is closed -->
                <script><![CDATA[
                    Map<String, Object> processedOrderItem = new HashMap<>(orderItem);
                    boolean isClosed = "ITEM_CANCELLED".equalsIgnoreCase(orderItem.itemStatus);
                    processedOrderItem.put("closed", isClosed);
                    processedOrderItem.remove("itemStatus");
                    processedOrderItem.put("orderLineId", processedOrderItem.orderItemSeqId)
                ]]></script>

                <if condition="isMixCartOrder">
                    <script>orderItem.shipmentMethodTypeId = selectedShippingMethod;</script>
                </if>

                <!-- Map Shipping Method -->
                <entity-find entity-name="co.hotwax.integration.IntegrationTypeMappingAndEnum" list="ShippingMethodMappingList">
                    <econdition field-name="integrationTypeId" value="NETSUITE_SHP_MTHD"/>
                    <econdition field-name="mappingKey" from="orderItem.shipmentMethodTypeId"/>
                </entity-find>

                <if condition="!taxMappingList.isEmpty()">
                    <!-- Loop through the tax mapping list to check for specific productTypeId match -->
                    <set field="taxCode" value="${taxMappingList?.find { it.mappingKey == 'DEFAULT' }?.mappingValue}"/>

                    <iterate list="taxMappingList" entry="mapping">
                        <!-- Check if the mapping's key matches the productTypeId -->
                        <if condition="mapping.mappingKey == orderItem.productTypeId">
                            <set field="taxCode" from="mapping.mappingValue"/>
                            <break/>
                        </if>
                    </iterate>
                </if>
                <!-- Add the taxCode to the processed order item -->
                <set field="processedOrderItem.taxCode" from="taxCode"/>

                <if condition="!ShippingMethodMappingList.isEmpty()">
                    <script><![CDATA[
                        processedOrderItem.put("shippingMethod", ShippingMethodMappingList[0].mappingValue)
                        processedOrderItem.remove("shipmentMethodTypeId")
                    ]]></script>
                    <else>

                        <!--Case: Digital Goods
                        - Digital goods are imported into OMS with a default shipping method (e.g., "STANDARD").
                        - If processed using the existing logic, digital goods may incorrectly inherit this shipping method.
                        TODO:
                        - For orders consisting solely of digital goods we need to handle this in the custom groovy logic.
                            - The `shippingMethod` is either hardcoded or set as empty per the client’s custom requirement.
                        -->

                        <!--Currently setting the shipment method as empty as in case of pos_completed method we does not have itm available
                        We can handle this in custom groovy if needed.-->
                        <script><![CDATA[
                        processedOrderItem.put("shippingMethod", "")
                        processedOrderItem.remove("shipmentMethodTypeId")
                    ]]></script>
                    </else>
                </if>
                <!--
                - This logic retrieves the department value by mapping the `facilityId` from the order item to the corresponding department identifier (`idValue`).
                - The mapping is fetched from the `FacilityIdentification` entity with the following conditions:
                    - `facilityId` matches the `location` field in the `orderItem`.
                    - `facilityIdenTypeId` is set to "ORDR_ORGN_DPT" (indicating the department associated with the facility).

                Case: POS Orders
                - The department is specifically mapped for orders originating from the "POS Channel".
                - If the mapping is successful, the first matched `idValue` is set as the `department` in the processed order item.

                order other than POS:
                - We does not have the location associated with it.
                - The logic for setting the `department` may vary based on client-specific requirements.
                - For non-POS orders (e.g., web orders), the department logic might differ and require custom mapping in groovy.

                Custom Handling:
                - The `department` field is overwritten in the custom Groovy service for client-specific scenarios.
                - This is necessary as the location is associated only with POS orders, and for other order types, the logic must adapt to meet the client’s requirements.
                - For example:
                    - Certain clients may require a default department for specific order types.
                    - Others might base the department on additional fields like the product category or sales region.
                -->
                <entity-find entity-name="co.hotwax.facility.FacilityIdentification" list="facilityIdentificationList">
                    <econdition field-name="facilityId" from="orderItem.location"/>
                    <econdition field-name="facilityIdenTypeId" value="ORDR_ORGN_DPT"/>
                    <date-filter/>
                </entity-find>

                <if condition="!facilityIdentificationList.isEmpty() &amp;&amp; 'POS Channel' == orderMap.salesChannel">
                    <script>processedOrderItem.put("department", facilityIdentificationList[0].idValue)</script>
                    <else>
                        <!--TODO: currently setting the department as empty for orders other then POS orders
                         this is handled in custom groovy script. -->
                        <script><![CDATA[
                            processedOrderItem.put("department", "")
                        ]]></script>
                    </else>
                </if>

                <!-- Map Price Level -->
                <entity-find entity-name="co.hotwax.integration.IntegrationTypeMappingAndEnum" list="priceLevelList">
                    <econdition field-name="integrationTypeId" value="NETSUITE_PRICE_LEVEL"/>
                    <econdition field-name="mappingKey" value="PRICE_LEVEL"/>
                </entity-find>

                <if condition="!priceLevelList.isEmpty()">
                    <script>processedOrderItem.put("priceLevel",priceLevelList[0].mappingValue)</script>
                    <else>
                        <!--TODO: currently setting the price level as custom if mapping is not available -->
                        <script><![CDATA[
                            processedOrderItem.put("priceLevel", "custom")
                        ]]></script>
                    </else>
                </if>

                <script>processedOrderItemList.add(processedOrderItem);</script>

                <!-- Process Promotions -->
                <entity-find entity-name="co.hotwax.order.OrderItemAdjustmentAndAttribute" list="orderAdjustmentList">
                    <econdition field-name="orderId" from="orderMap.orderId"/>
                    <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    <econdition field-name="orderAdjustmentTypeId" value="EXT_PROMO_ADJUSTMENT"/>
                    <econdition field-name="attrName" operator="is-null"/>
                </entity-find>
                <if condition="orderAdjustmentList &amp;&amp; orderAdjustmentList.size() > 0">

                    <set field="totalPromotionAmount" default-value="0" type="BigDecimal"/>
                    <iterate list="orderAdjustmentList" entry="adjustment">
                        <set field="totalPromotionAmount" from="totalPromotionAmount + adjustment.amount"/>
                    </iterate>

                    <!--
                    - A duplicate item map is created to represent the promotional discount as a separate row in the processed order item list.
                    - Key updates in the duplicate map:
                        - `price` is set to the total promotional amount.
                        - A custom field, `isDiscountRow`, is set to "true" to distinguish this row as a promotional discount.

                    TODO:
                    - Currently, the promotional discount item is created as an exact copy of the original item, except for the `price` and `isDiscountRow` fields.
                    - Revisit this logic to ensure that only relevant fields are copied or modified.
                    -->
                    <script><![CDATA[
                        Map<String, Object> promoOrderItemDetail = new HashMap<>(processedOrderItem);
                        promoOrderItemDetail.put("price", totalPromotionAmount);
                        promoOrderItemDetail.put("isDiscountRow", "true");
                        processedOrderItemList.add(promoOrderItemDetail);
                    ]]></script>
                </if>
            </iterate>

            <!-- Add Processed Order Items to Processed Order Map -->
            <script><![CDATA[
                processedOrderMap.put("HCOrderId", processedOrderMap.orderId)
                processedOrderMap.put("orderItems", processedOrderItemList);
            ]]></script>
            <!-- Prepare the Final Order Detail Map -->

            <set field="orderMapDetail" from="processedOrderMap"/>
        </actions>
    </service>
</services>