<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">
    <service verb="change" noun="NetSuiteScriptStatus"  type="netsuite-rest" location="netsuite.restlet.script.status" method="post" authenticate="false">
        <description>Change NetSuite SuiteScript Status on given parameters</description>
        <in-parameters>
            <parameter name="jobName"/>
            <parameter name="paused"/>
        </in-parameters>
    </service>

    <service verb="run" noun="DummySuiteScript">
        <description>This is a dummy service without any business logic</description>
        <in-parameters>
            <parameter name="jobName"/>
        </in-parameters>
        <actions>
        </actions>
    </service>

    <service verb="run" noun="NetSuiteScript"  type="netsuite-rest" location="netsuite.restlet.script.run" method="post" authenticate="false">
        <description>Call NetSuite Run SuiteScript Service.</description>
        <in-parameters>
            <parameter name="jobName"/>
            <parameter name="scriptType"/>
        </in-parameters>
    </service>

    <service verb="call" noun="RunNetSuiteScript">
        <in-parameters>
            <parameter name="jobName"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.job.ServiceJobParameter" value-field="serviceJobParameter" cache="true">
                <field-map field-name="jobName" from="jobName"/>
                <field-map field-name="parameterName" from="'scriptType'"/>
            </entity-find-one>
            <if condition="serviceJobParameter == null"><return error="true" message="Could not find serviceJobParameter with jobName ${jobName}"/></if>

            <set field="inMap" from="[:]"/>
            <set field="inMap.jobName" from="jobName"/>
            <set field="inMap.scriptType" from="serviceJobParameter.parameterValue"/>
            <service-call name="co.hotwax.netsuite.NetSuiteRestletServices.run#NetSuiteScript"
                          in-map="inMap" out-map="result"/>
        </actions>
    </service>

    <service verb="get" noun="ScriptCronExpression"  type="netsuite-rest" location="netsuite.restlet.script.cronexpression" method="get">
        <description>Get NetSuite SuiteScript Cron Expressions </description>
        <in-parameters>
            <parameter name="jobName"/>
        </in-parameters>
        <out-parameters>
            <parameter name="recurrenceMinutes"/>
        </out-parameters>
    </service>

    <service verb="call" noun="GetScriptCronExpression" >
        <description>Call Get NetSuite SuiteScript Cron Expressions </description>
        <in-parameters>
            <parameter name="jobName"/>
        </in-parameters>
        <actions>
            <set field="inMap" from="[:]"/>
            <set field="inMap.jobName" from="jobName"/>
            <service-call name="co.hotwax.netsuite.NetSuiteRestletServices.get#ScriptCronExpression"
                          in-map="inMap" out-map="result"/>
            <script>
                <![CDATA[
                    String cronExp = null
                    recurrenceMinutes = result.recurrenceMinutes
                    recurrenceMinutes = recurrenceMinutes as Integer  // Convert to Integer

                    if (recurrenceMinutes && recurrenceMinutes < 60) {
                        cronExp = "0 */${recurrenceMinutes} * * * ?"
                    } else if (recurrenceMinutes && recurrenceMinutes >= 60) {
                        hours = recurrenceMinutes / 60
                        cronExp = "0 0 */${hours} * * ?"
                    } else {
                        cronExp = "0 0 0 * * ?"
                    }
            ]]></script>
            <if condition="cronExp &amp;&amp; jobName">
                <service-call name="update#moqui.service.job.ServiceJob"
                              in-map="[jobName:jobName, cronExpression:cronExp]"/>
            </if>
        </actions>
    </service>

    <service verb="store" noun="SFTPConfiguration"  type="netsuite-rest" location="netsuite.restlet.sftp.sftpconfiguration" method="post" authenticate="false">
        <description>Store SFTP Configurataion in NetSuite </description>
        <in-parameters>
            <parameter name="hostName"/>
            <parameter name="userName"/>
            <parameter name="port"/>
            <parameter name="hostKey"/>
            <parameter name="defaultDirectory"/>
            <parameter name="secretId"/>
        </in-parameters>
    </service>
</services>