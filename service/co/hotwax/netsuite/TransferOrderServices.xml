<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="map" noun="WhTransferOrderFulfillment" transaction-timeout="1800">
        <description>
            Service to map Warehouse to Store Transfer Order Fulfillment from NetSuite in OMS.
            The Warehouse TOs are fulfilled by third party, and so shipments in OMS will be created in Shipped Status.
        </description>
        <in-parameters>
            <parameter name="payload" type="Map" required="true">
                <description>The Transfer Order Fulfillment map from NetSuite to be mapped as per Shipment in OMS.</description>
                <parameter name="transferOrderId"/>
                <parameter name="externalId"/>
                <parameter name="trackingNumber"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="externalId"/>
                        <parameter name="productIdType"/>
                        <parameter name="productIdValue"/>
                        <parameter name="quantity" type="Integer"/>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="payload" type="Map">
                <description>The Shipment map with mapped fields for OMS.</description>
                <parameter name="orderId"/>
                <parameter name="externalId"/>
                <parameter name="trackingNumber"/>
                <parameter name="shipmentStatusId"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="orderItemSeqId"/>
                        <parameter name="shipGroupSeqId"/>
                        <parameter name="externalId"/>
                        <parameter name="productId"/>
                        <parameter name="quantity" type="Integer"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- By default, external fulfilled shipments for WH TOs will be created in SHIPMENT_SHIPPED status -->
            <set field="payload.shipmentStatusId" value="SHIPMENT_SHIPPED"/>

            <!-- Get HC Order ID -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderHeader" list="orderList">
                <econdition field-name="externalId" from="payload.remove('transferOrderId')"/>
            </entity-find>
            <set field="payload.orderId" from="orderList?.first?.orderId"/>

            <iterate list="payload.items" entry="item">
                <!-- Get HC Product ID -->
                <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentifications" limit="1">
                    <econdition field-name="goodIdentificationTypeId" from="item.remove('productIdType')"/>
                    <econdition field-name="idValue" from="item.remove('productIdValue')"/>
                    <date-filter/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <set field="item.productId" from="goodIdentifications?.first?.productId"/>

                <!-- Get Order Item Seq ID and Ship Group Seq ID -->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId" from="payload.orderId"/>
                    <econdition field-name="productId" from="item.productId"/>
                </entity-find>
                <set field="item.orderItemSeqId" from="orderItemList?.first?.orderItemSeqId"/>
                <set field="item.shipGroupSeqId" from="orderItemList?.first?.shipGroupSeqId"/>
            </iterate>
        </actions>
    </service>

    <service verb="map" noun="StoreTransferOrderFulfillment" transaction-timeout="1800">
        <in-parameters>
            <parameter name="payload" type="Map" required="true">
                <description>The Transfer Order Fulfillment map from NetSuite to be mapped as per Shipment in OMS.</description>
                <parameter name="shipmentId"/>
                <parameter name="externalId"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="externalId"/>
                        <parameter name="productIdType"/>
                        <parameter name="productIdValue"/>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="payload" type="Map">
                <description>The Shipment map with mapped fields for OMS.</description>
                <parameter name="shipmentId"/>
                <parameter name="externalId"/>
                <parameter name="items" type="List">
                    <parameter name="itemMap" type="Map">
                        <parameter name="shipmentItemSeqId"/>
                        <parameter name="externalId"/>
                        <parameter name="productId"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <iterate list="payload.items" entry="item">
                <!-- Get HC Product ID -->
                <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentifications" limit="1">
                    <econdition field-name="goodIdentificationTypeId" from="item.remove('productIdType')"/>
                    <econdition field-name="idValue" from="item.remove('productIdValue')"/>
                    <date-filter/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <set field="item.productId" from="goodIdentifications?.first?.productId"/>

                <!-- Get shipment Item Seq ID  -->
                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentItem" list="shipmentItemList">
                    <econdition field-name="shipmentId" from="payload.shipmentId"/>
                    <econdition field-name="productId" from="item.productId"/>
                </entity-find>
                <set field="item.shipmentItemSeqId" from="shipmentItemList?.first?.shipmentItemSeqId"/>
            </iterate>
        </actions>
    </service>
    <service verb="generate" noun="TransferOrderShipmentReceiptFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="shipmentId">
                <description>Parameter to fetch Shipment details for a specific shipmentId.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote ID to send Shipment Receipt Feed.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating Shipment Receipt Feed.</description>
            </parameter>
            <parameter name="sinceReceivedDate">
                <description>Parameter to fetch Shipment Receipt details received after a specific date.</description>
            </parameter>
            <parameter name="productStoreIds" type="List">
                <description>
                    List of product Store Ids for generating Shipment Receipt feed.
                    For passing the Product Store Ids as list, add values like - SM_STORE,SG_STORE and for single value use - SM_STORE.
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Shipments Receipt Feed file for Shipment ${shipmentId} at time ${nowDate}"/>

            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                // Dynamic view to retrieve eligible Transfer Order Shipments for the Receipt feed
                def shipmentReceipt_find = ec.entity.find("org.apache.ofbiz.shipment.receipt.ShipmentReceipt")
                dynamicView = shipmentReceipt_find.makeEntityDynamicView()
                dynamicView.setEntityName("TransferOrderShipmentReceipt")

                dynamicView.addMemberEntity("SR", "org.apache.ofbiz.shipment.receipt.ShipmentReceipt", null, null, null)
                dynamicView.addMemberEntity("SH", "org.apache.ofbiz.shipment.shipment.Shipment","SR", false,["shipmentId":"shipmentId"])
                dynamicView.addMemberEntity("SI", "org.apache.ofbiz.shipment.shipment.ShipmentItem","S", false,["shipmentId":"shipmentId"])

                dynamicView.addMemberEntity("OH", "org.apache.ofbiz.order.order.OrderHeader", "SH", false, ["primaryOrderId":"orderId"])
                dynamicView.addMemberEntity("SRH", "co.hotwax.integration.shipment.ShipmentReceiptHistory", "SR", true, ["receiptId":"receiptId"])

                dynamicView.addAlias("SH", "shipmentExternalId", "externalId", null)
                dynamicView.addAlias("SH", "shipmentId")
                dynamicView.addAlias("SH", "shipmentTypeId")
                dynamicView.addAlias("OH", "productStoreId")
                dynamicView.addAlias("OH", "orderId")
                dynamicView.addAlias("OH", "orderExternalId", "externalId", null)
                dynamicView.addAlias("SRH", "historyId")

                shipmentReceipt_find.condition("historyId", EntityCondition.IS_NULL, null)
                shipmentReceipt_find.condition("shipmentTypeId", "OUT_TRANSFER")

                if(shipmentId) shipmentReceipt_find.condition("shipmentId", shipmentId)
                if(productStoreIds) shipmentReceipt_find.condition("productStoreId",EntityCondition.ComparisonOperator.IN, productStoreIds)
                if(sinceReceivedDate) shipmentReceipt_find.havingCondition(ec.entity.conditionFactory.makeCondition("receivedDate", EntityCondition.ComparisonOperator.GREATER_THAN, sinceReceivedDate))
                shipmentReceipt_find.selectField("shipmentId,orderExternalId,shipmentExternalId,orderId")
                shipmentReceipt_find.distinct(true)

                // Using try-with-resources to automatically close the EntityListIterator 'shipmentReceiptItr'
                try (shipmentReceiptItr = shipmentReceipt_find.iterator()) {
            </script>

            <!-- If no transfer order in shipmentReceiptItr, then don't generate the file -->
            <if condition="!shipmentReceiptItr.hasNext()">
                <return message="No eligible Transfer Order for Shipments Receipts Feed at ${nowDate}, not generating the TO Shipment Receipt Feed File for NetSuite."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare Shipment Receipt JSON File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'),
                dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS')], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <!-- Prepare the Shipment Receipt Feed file -->
            <script>
                try {
                //json file
                File shipmentsReceiptFeedFile = new File(jsonFilePath)
                if (!shipmentsReceiptFeedFile.parentFile.exists()) shipmentsReceiptFeedFile.parentFile.mkdirs()
                JsonFactory jfactory = new JsonFactory()

                /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,
                so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, shipmentsReceiptFeedFile);
                JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                    jGenerator.writeStartArray()
            </script>

            <!-- Preparing Shipment Receipts -->
            <iterate list="shipmentReceiptItr" entry="shipmentReceipt">
                <!--
                    For some clients, we have the Netsuite Order ID in the identification.
                    Therefore, we first check if the Netsuite Order ID is present in the identification;
                    if so, we use that. Otherwise, we use the external ID from the OrderHeader.
                -->
                <entity-find entity-name="co.hotwax.order.OrderIdentification" list="orderIdentificationList">
                    <econdition field-name="orderId" from="shipmentReceipt.orderId"/>
                    <econdition field-name="orderIdentificationTypeId" value="NETSUITE_ORDER_ID"/>
                </entity-find>

                <set field="netsuiteOrderId" from="orderIdentificationList?.first?.idValue"/>
                <set field="orderId" from=" netsuiteOrderId ? netsuiteOrderId : shipmentReceipt.orderExternalId"/>

                <set field="shipmentReceiptMap" from="[orderId:orderId, fulfillmentId:shipmentReceipt.shipmentExternalId]"/>
                <set field="items" from="[]"/>

                <script>
                    // dynamicView to fetch item details for eligible shipmentId
                    def entity_find = ec.entity.find("org.apache.ofbiz.shipment.receipt.ShipmentReceipt")
                    dynamicView = entity_find.makeEntityDynamicView()

                    dynamicView.addMemberEntity("SR", "org.apache.ofbiz.shipment.receipt.ShipmentReceipt", null, null, null)
                    dynamicView.addMemberEntity("SI", "org.apache.ofbiz.shipment.shipment.ShipmentItem","SR", false,["shipmentId":"shipmentId","shipmentItemSeqId":"shipmentItemSeqId"])
                    dynamicView.addMemberEntity("SRH", "co.hotwax.integration.shipment.ShipmentReceiptHistory", "SR", true, ["receiptId":"receiptId"])

                    dynamicView.addAlias("SI", "productId")
                    dynamicView.addAlias("SI", "shipmentId")
                    dynamicView.addAlias("SI", "shipmentItemExternalId", "externalId", null)
                    dynamicView.addAlias("SR", "totalQuantityAccepted", "quantityAccepted", null)
                    dynamicView.addAlias("SR", "receiptId")
                    dynamicView.addAlias("SRH", "historyId")

                    entity_find.condition("historyId", EntityCondition.IS_NULL, null)
                    entity_find.condition("shipmentId", shipmentReceipt.shipmentId)

                    entity_find.selectField("shipmentItemExternalId,productId,totalQuantityAccepted,receiptId")

                    // Using try-with-resources to automatically close the EntityListIterator 'shipmentReceiptItemItr'
                    try (shipmentReceiptItemItr = entity_find.iterator()) {
                </script>

                <!-- Preparing Shipment Receipt Item Details -->
                <iterate list="shipmentReceiptItemItr" entry="shipmentReceiptItem">

                    <!-- Get NetSuite Product ID for each item -->
                    <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentificationList">
                        <econdition field-name="productId" from="shipmentReceiptItem.productId"/>
                        <econdition field-name="goodIdentificationTypeId" value="NETSUITE_PRODUCT_ID"/>
                        <date-filter/>
                    </entity-find>

                    <set field="itemMap" from="[lineId:shipmentReceiptItem.shipmentItemExternalId, quantity:shipmentReceiptItem.totalQuantityAccepted, productId:goodIdentificationList?.first?.idValue]"/>
                    <script>items.add(itemMap)</script>

                    <!-- Create Shipment Receipt History for each received item included in the feed -->
                    <service-call name="create#co.hotwax.integration.shipment.ShipmentReceiptHistory" in-map="[receiptId:shipmentReceiptItem.receiptId,
                        comments:'Order Item sent as part of Transfer Order Shipment Receipt Feed', createdDate:nowDate]"/>
                </iterate>
                <script>
                    }
                </script>

                <set field="shipmentReceiptMap.items" from="items"/>

                <script>
                    new ObjectMapper()
                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator, shipmentReceiptMap)
                </script>
            </iterate>
            <script>
                            jGenerator.writeEndArray()
                        }
                    } catch (IOException e) {
                        logger.info("Error preparing Shipments Receipt Feed file", e)
                    }
                }
            </script>

            <!-- Call queue#SystemMessage that will save the json file path in messageText and
            send the file to sftp using send service configured in SystemMessageType -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                messageText:jsonFilePathRef, productStoreId:productStoreId]" out-map="shipmentsReceiptFeedSysMsgOut"/>

            <return message="Completed the Transfer Order Shipments Receipt Feed file at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${shipmentsReceiptFeedSysMsgOut?.systemMessageId}"/>
        </actions>
    </service>

    <service verb="generate" noun="CreateTransferOrderItemsFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="orderId">
                <description>Parameter to fetch Order details for a specific orderId.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
            <parameter name="thruOrderDate">
                <description>Parameter to fetch Order details after specific order date</description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Transfer Order Items Feed file for Order ${orderId} at time ${nowDate}"/>

            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null">
                <return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/>
            </if>

            <!-- Prepare csv File Path -->
            <set field="csvFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
                 productStoreId:productStoreId], false)"/>

            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>

            <script>
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVPrinter
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                File csvFile = new File(csvFilePath)
                if (!csvFile.parentFile.exists()) csvFile.parentFile.mkdirs()
                def csvHeaders = null

                transferOrder_find = ec.entity.find("co.hotwax.integration.order.TransferOrderItemSyncView")
                if(orderId) transferOrder_find.condition("orderId", orderId)
                if(fromOrderDate) transferOrder_find.condition("orderDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromOrderDate)
                if(thruOrderDate) transferOrder_find.condition("orderDate", EntityCondition.ComparisonOperator.LESS_THAN, fromOrderDate)
                transferOrder_find.selectField("orderId")
                transferOrder_find.distinct(true)

                // Using try-with-resources to automatically close the EntityListIterator 'transferOrderItr'
                try (transferOrderItr = transferOrder_find.iterator()) {
            </script>

            <if condition="!transferOrderItr.hasNext()">
                <return message="No eligible orders at ${nowDate}, not generating the HotWax Feed file."/>
            </if>

            <script>
                try (def writer = Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8);
                def csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)) {
            </script>

            <iterate list="transferOrderItr" entry="transferOrder">
                <entity-find entity-name="co.hotwax.integration.order.TransferOrderItemSyncView" list="transferOrderItemList">
                    <econdition field-name="orderId" from="transferOrder.orderId"/>
                </entity-find>
                <iterate list="transferOrderItemList" entry="transferOrderItem">

                    <script>transferOrderItem.orderDate = new java.text.SimpleDateFormat("MM/dd/yyyy").format(new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").parse(transferOrderItem.orderDate.toString()))</script>

                    <set field="templateLoc" value="component://mantle-netsuite-connector/template/GenerateTransferOrder.ftl"/>
                    <set field="templateWriter" from="new StringWriter()"/>
                    <script>ec.resourceFacade.template(templateLoc, templateWriter)</script>
                    <set field="jsonOut" from="(org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(templateWriter.toString(), Map.class))"/>

                    <script>
                        // Dynamically determine headers in the first iteration
                        if (!csvHeaders) {
                            csvHeaders = jsonOut.keySet().collect { it as String }
                            csvPrinter.printRecord(csvHeaders)
                        }

                        def orderedRecord = csvHeaders.collect { key -> jsonOut[key] != null ? jsonOut[key] : "" }
                        csvPrinter.printRecord(orderedRecord)
                    </script>
                </iterate>
            </iterate>
            <script>
                } catch (Exception e) {
                    ec.message.addError("Error preparing Transfer Order feed file ${e}")
                }
            }
            </script>

                <!-- Save the Json Feed File path in System Message messageText -->
                <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                    in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                    messageText:csvFilePath]" out-map="FeedSysMsgOut"/>

                <return message="Generating Transfer Order Items Feed file with type ${systemMessageTypeId} and
                    remote ${systemMessageRemoteId} saved response in messages ${FeedSysMsgOut?.systemMessageId}"/>
        </actions>
    </service>
</services>
