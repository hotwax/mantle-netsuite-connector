<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="generate" noun="CustomerDepositFeed" authenticate="anonymous-all" transaction-timeout="7200">
        <in-parameters>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Orders Feed for Netsuite.</description>
            </parameter>
            <parameter name="fromDate">
                <description>Parameter to fetch the customer deposit after specific date (when the netsuite order id is sync with hotwax)</description>
            </parameter>
            <parameter name="excludeShipmentMethod" type="List">
                <description>Parameter to exclude the Orders from the specific shipment method or a list of shipping method
                    like: POS_COMPLETED
                </description>
            </parameter>
            <parameter name="excludePaymentMethod" type="List">
                <description>Parameter to exclude the specific payment method or a list of payment method</description>
            </parameter>
            <parameter name="includePaymentMethod" type="List">
                <description>Parameter to include the specific payment method or a list of payment method</description>
            </parameter>
            <parameter name="jobName">
                <description>The name of the scheduled job to fetch the last run time for preparing customer deposit feed.</description>
            </parameter>
            <parameter name="skipLastRunTimeUpdate" type="Boolean" default="false">
                <description>skip the LastRunTime update,mainly used while debugging</description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating customer deposit feed at time ${nowDate}"/>

            <!-- We can use last run time to fetch the records updated after the last service job run -->
            <entity-find-one entity-name="moqui.service.job.ServiceJobParameter" value-field="lastRunParam">
                <field-map field-name="jobName"/>
                <field-map field-name="parameterName" value="lastRunTime"/>
            </entity-find-one>

            <!-- Set sinceDate using the lastRunTime, if it is set, fetch updates from
                   that time, else it will be null -->
            <if condition="!fromDate">
                <set field="fromDate" from="lastRunParam?.parameterValue"/>
            </if>

            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets
                import org.moqui.entity.EntityCondition

                customerDeposit_find = ec.entity.find("co.hotwax.financial.CustomerDepositSyncView")
                if(fromDate) customerDeposit_find.condition("fromDate", EntityCondition.ComparisonOperator.GREATER_THAN, fromDate)
                if(excludeShipmentMethod) customerDeposit_find.condition("shipmentMethodTypeId",EntityCondition.ComparisonOperator.NOT_IN, excludeShipmentMethod)
                if(excludePaymentMethod) customerDeposit_find.condition("paymentMethodTypeId",EntityCondition.ComparisonOperator.NOT_IN, excludePaymentMethod)
                if(includePaymentMethod) customerDeposit_find.condition("paymentMethodTypeId",EntityCondition.ComparisonOperator.IN, includePaymentMethod)

                // Using try-with-resources to automatically close the EntityListIterator 'depositItr'
                try (depositItr = customerDeposit_find.iterator()) {
            </script>

            <if condition="!depositItr.hasNext()">
                <return message="No eligible customer deposit at ${nowDate}, not generating the HotWax Feed file."/>
            </if>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if>

            <!-- Prepare JSON File Path -->
            <!-- Using receivePath from SystemMessageType to prepare the jsonFilePathRef.-->
            <set field="jsonFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
            [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
             productStoreId:productStoreId], false)"/>
            <set field="jsonFilePath" from="ec.resource.getLocationReference(jsonFilePathRef).getUri().getPath()"/>

            <!-- Prepare the customer deposit Feed file  -->
            <script>
                try {
                //json file
                    File cusFeedFile = new File(jsonFilePath)
                    if (!cusFeedFile.parentFile.exists()) cusFeedFile.parentFile.mkdirs()
                    JsonFactory jfactory = new JsonFactory()

                    /* Declaring the PrintWriter and JsonGenerator resources in the the try statement,
                    so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, cusFeedFile);
                    JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                        jGenerator.writeStartArray()
            </script>

            <entity-find entity-name="co.hotwax.integration.IntegrationTypeMapping" list="paymentMapping">
                <econdition field-name="integrationTypeId" value="NETSUITE_PMT_MTHD"/>
            </entity-find>

            <iterate list="depositItr" entry="cusDeposit">
                <set field="customerDeposit" from="[:]"/>
                <set field="paymentMethod" from="(paymentMapping.find { it.mappingKey == cusDeposit.paymentMethodTypeId } ?: paymentMapping.find { it.mappingKey == 'DEFAULT' })?.mappingValue"/>

                <entity-find entity-name="co.hotwax.order.OrderIdentification" list="orderIdentifications">
                    <econdition field-name="orderId" from="cusDeposit.HCOrderId"/>
                </entity-find>

                <filter-map-list list="orderIdentifications" to-list="shopifyOrderNumberList">
                    <field-map field-name="orderIdentificationTypeId" value="SHOPIFY_ORD_NO"/>
                </filter-map-list>
                <filter-map-list list="orderIdentifications" to-list="shopifyOrderIdList">
                    <field-map field-name="orderIdentificationTypeId" value="SHOPIFY_ORD_ID"/>
                </filter-map-list>
                <filter-map-list list="orderIdentifications" to-list="shopifyOrderNameList">
                    <field-map field-name="orderIdentificationTypeId" value="SHOPIFY_ORD_NAME"/>
                </filter-map-list>

                <set field="customerDeposit" from="[totalAmount:cusDeposit.totalAmount, externalId:cusDeposit.externalId, orderId:cusDeposit.orderId, paymentMethod:paymentMethod,
                    shopifyOrderNumber:shopifyOrderNumberList[0]?.idValue, shopifyOrderId:shopifyOrderIdList[0]?.idValue, shopifyOrderName:shopifyOrderNameList[0]?.idValue]"/>

                <script>

                        new ObjectMapper()
                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty('default_date_time_format')))
                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator, customerDeposit)
                </script>
            </iterate>
            <script>
                        jGenerator.writeEndArray()
                        }
                    } catch (IOException e) {
                        logger.error("Error preparing customer deposit file", e)
                    }
                }
            </script>

            <!-- Call queue#SystemMessage that will save the json file path in messageText and send the file to sftp
             using the send service configured in SystemMessageType -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId,
                systemMessageRemoteId:systemMessageRemoteId, messageText:jsonFilePathRef]"
                out-map="custFeedSystemMessageOut"/>

            <!-- Based on the input of skipLastRunTimeUpdate, we can update the last Run time
                   This will help in controlling the update of last run time if the job is run manually -->
            <if condition="!skipLastRunTimeUpdate">
                <!-- Set the current timestamp as the last run time for next run -->
                <service-call name="update#moqui.service.job.ServiceJobParameter"
                    in-map="[jobName:lastRunParam.jobName, parameterName:lastRunParam.parameterName,
                    parameterValue:nowDate]"/>
            </if>
            <return message="Created the HotWax customer deposit Feed file at time ${ec.user.nowTimestamp} with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${custFeedSystemMessageOut.systemMessageId}"/>
        </actions>
    </service>
     <service verb="generate" noun="CustomerSyncFeed" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="partyId">
                <description>Parameter to fetch party details for a specific customer.</description>
            </parameter>
            <parameter name="systemMessageTypeId" required="true">
                <description>The System Message Type ID for generating the Customer Feed for Netsuite.</description>
            </parameter>
            <parameter name="systemMessageRemoteId" required="true">
                <description>The System Message Remote Id for generating the Customer Feed for Netsuite.</description>
            </parameter>
        </in-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <log message="Generating Customer Feed file for party ${partyId} at time ${nowDate}"/>

            <!-- Fetch the receivePath from SystemMessageType to prepare the path for creating the file in the receiving system. Ex: Moqui's datamanager directory in runtime for creating feeds.-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/>
            <if condition="systemMessageType == null">
                <return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/>
            </if>
            <!-- Prepare csv File Path -->
            <set field="csvFilePathRef" from="ec.resource.expand(systemMessageType.receivePath, null,
                [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDate, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDate, 'yyyy-MM-dd-HH-mm-ss-SSS'),
                 productStoreId:productStoreId], false)"/>
            <set field="csvFilePath" from="ec.resource.getLocationReference(csvFilePathRef).getUri().getPath()"/>

            <!-- Fetch the Groovy script resource path -->
            <entity-find-one entity-name="moqui.service.message.SystemMessageTypeParameter" value-field="groovyFileResource">
                <field-map field-name="systemMessageTypeId" from="systemMessageTypeId"/>
                <field-map field-name="parameterName" value="resourcePath"/>
            </entity-find-one>
            <set field="scriptPath" from="groovyFileResource.parameterValue"/>

            <script>
                import org.apache.commons.csv.CSVFormat
                import org.apache.commons.csv.CSVPrinter
                import java.nio.file.Files
                import java.nio.file.Paths
                import java.nio.charset.StandardCharsets

                File csvFile = new File(csvFilePath)
                if (!csvFile.parentFile.exists()) {
                    csvFile.parentFile.mkdirs()
                }

                 // Fetch customers and check if there are eligible customers
                def netsuiteCustomer_find = ec.entity.find("co.netsuite.customer.CustomerView")
                if (partyId) {
                    netsuiteCustomer_find.condition("externalId", partyId)
                }
                try (netsuiteCustomer_itr = netsuiteCustomer_find.iterator()) {
            </script>
        <if condition="!netsuiteCustomer_itr.hasNext()">
         <return message="No eligible customer at ${nowDate}, not generating the HotWax Feed file."/>
        </if>
        <script>
            try {
                // Try-with-resources for BufferedWriter
                Files.newBufferedWriter(Paths.get(csvFilePath), StandardCharsets.UTF_8).withCloseable { writer ->
                    // Try-with-resources for CSVPrinter
                    new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader()).withCloseable { csvPrinter ->


                    def csvHeaders = null
                    netsuiteCustomer_itr.each { customer ->
                        def customerData = [:]
                        customerData.putAll(customer)

                        customerData.individual = "T"
                        customerData.status = "CUSTOMER-Closed Won"
                        customerData.taxable = "TRUE"
                        customerData.defaultOrderPriority = "5"
                        customerData.externalId = customerData.HCShopifyCustomerId

                        customerData.firstName = (customer.firstName?.length() > 13 ? customer.firstName.substring(0, 13) : customer.firstName) ?: "X"
                        customerData.lastName = (customer.lastName?.length() > 13 ? customer.lastName.substring(0, 13) : customer.lastName) ?: "X"

                        customerData.phone = [customer.countryCode, customer.areaCode, customer.contactNumber].findAll { it }?.join(' ') ?: null

                        // Remove unnecessary fields
                        customerData.remove("countryCode")
                        customerData.remove("areaCode")
                        customerData.remove("contactNumber")

                        // Execute Groovy script if available
                        if (groovyFileResource) {
                            Object scriptResult = ec.resource.script(scriptPath, null, [customerData: customerData])
                            if (scriptResult instanceof Map) {
                                customerData.putAll(scriptResult)
                            }
                        }

                       // Set headers only once
                        if (csvHeaders == null) {
                            csvHeaders = customerData.keySet() as List
                            csvPrinter.printRecord(csvHeaders)
                        }

                        // Write each row
                        csvPrinter.printRecord(csvHeaders.collect { key -> customerData[key] ?: "" })
                    }
                    }
                }
                } catch (Exception e) {
                    ec.message.addError("Error preparing customer feed file ${e}")
                }
            }
        </script>
            <!-- Save the Json Feed File path in System Message messageText -->
            <service-call name="org.moqui.impl.SystemMessageServices.queue#SystemMessage"
                in-map="[systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId,
                messageText:csvFilePath]" out-map="FeedSysMsgOut"/>

            <return message="Generating customer sync feed file with type ${systemMessageTypeId} and
                remote ${systemMessageRemoteId} saved response in messages ${FeedSysMsgOut.systemMessageId}"/>
        </actions>
    </service>
</services>